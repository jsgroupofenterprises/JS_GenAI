{
  "entity_name": "wifi_getRadioMaxBitRate",
  "component": "hal",
  "content_hash": "6e4bf8dc75ea5c490a2bbf4fc4128ac9",
  "response": "1. Main purpose and functionality\n\nThis is the DPP (Device Provisioning Protocol) related API. DPP allows the user to configure devices without the need for the user to enter a password. Initiating a Wi-Fi DPP operation using the provided AP interface will generate a QR code that can be scanned using a smartphone. The smartphone will then be instructed to connect to the Wi-Fi network using the selected security method.\n\n2. Key operations and data flow\n\nThe key operations are:\nSet the DPP password_id.\nSet the DPP public key.\nSet the DPP URI.\nStart the DPP configurator.\nDataflow: The user initiates a DPP operation using the provided AP interface. This will generate a QR code that can be scanned using a smartphone. The QR code will contain the password_id, the public key, and the URI. The smartphone will then use this information to connect to the Wi-Fi network using the selected security method.\n\n3. Interaction with other components (if any)\n\nThe DPP API interacts with the following components:\nThe Wi-Fi driver\nThe Wi-Fi stack\nThe smartphone application\nThe DPP service\n4. Important parameters and return values\n\nThe important parameters are:\npassword_id: A unique identifier for the DPP operation.\npublic key: The public key for the DPP operation.\nURI: The URI for the DPP operation.\nreturn values:\nThe return values are:\nRETURN_OK: The operation was successful.\nRETURN_ERR: The operation failed.\n\n5. Any specific RDK-related operations\n\nThere are no specific RDK-related operations for the DPP API.\n\nwifi_dppSetPassphrase(CHAR *phrase);\nwifi_dppSetPKHash(UINT *pk_hash);\nwifi_dppSetUri(CHAR *uri);\nwifi_dppSetURIIndex(INT index);\nwifi_dppSetR1Hash(UCHAR *r1_hash);\nwifi_dppSetR2Hash(UCHAR *r2_hash);\nwifi_dppSetCurve(INT curve);\nwifi_dppSetMAC(INT apIndex, CHAR *dppMac);\nwifi_dppStartConfig(INT apIndex, INT peerIndex);\nwifi_dppStop();\nwifi_dppEnable(INT apIndex, BOOL enable);\nwifi_dppGetEnabled(INT apIndex, BOOL *enable);\n\n\n\nINT wifi_checkDppEnabled(void); /* Check if the DPP is enabled */",
  "processed_at": "2024-11-14T13:03:07.108430"
}