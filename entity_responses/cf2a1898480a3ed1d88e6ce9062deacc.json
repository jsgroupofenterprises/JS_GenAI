{
  "entity_name": "wifi_setRadioChannelMode",
  "component": "hal",
  "content_hash": "cf2a1898480a3ed1d88e6ce9062deacc",
  "response": "**wifi_dppSetSTAPassphrase** configures STA specific password in AP\n\n**Declaration:**\n\n```\nINT wifi_dppSetSTAPassphrase(UINT apIndex, CHAR *sta, CHAR *key);\n```\n\n**Parameters:**\n\n* `apIndex`: index of the vAP to send the request from.\n\n* `sta`: MAC address string of the peer device to send the request to. Must be an external device MAC address.\n\n* `key`: passphrase to store with STA, it'll be used when STA is connecting via DPP process\n\n**Return values:**\n\n* `RETURN_OK` if successful.\n* `RETURN_ERR` if any error is detected.\n\n**Key operations and data flow:**\n\n* The function takes the apIndex, sta MAC address, and passphrase and sends it to the driver.\n* The driver will store the passphrase with the STA MAC address.\n* When the STA connects using DPP, the driver will use the stored passphrase to authenticate the STA.\n\n**Interaction with other components:**\n\n* The function interacts with the driver to store the passphrase.\n* The function does not interact with any other components.\n\n**Important parameters and return values:**\n\n* The `apIndex` parameter must be a valid vAP index.\n* The `sta` parameter must be a valid MAC address string.\n* The `key` parameter must be a valid passphrase.\n* The function returns `RETURN_OK` if the passphrase is successfully stored.\n* The function returns `RETURN_ERR` if there is an error storing the passphrase.\n\n**Specific RDK-related operations:**\n\n* The function is used to store STA specific passphrases in the AP.\n* The passphrases are used when STAs connect using DPP.",
  "processed_at": "2024-11-14T13:12:16.105750"
}