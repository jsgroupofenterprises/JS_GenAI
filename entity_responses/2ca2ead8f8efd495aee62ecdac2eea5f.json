{
  "entity_name": "wifi_getRadioDcsDwelltime",
  "component": "hal",
  "content_hash": "2ca2ead8f8efd495aee62ecdac2eea5f",
  "response": "**1. Main purpose and functionality**\n\nThe DPP (Device Provisioning Protocol) API is a set of functions that allow a device to provision another device onto a Wi-Fi network. The DPP API can be used to provision devices that do not have a display or keyboard, such as IoT devices.\n\n**2. Key operations and data flow**\n\nThe DPP API consists of the following key operations:\n\n* **Initiate the provisioning process:** The provisioning process is initiated by the provisioning device. The provisioning device sends a DPP Request message to the target device. The DPP Request message contains the SSID and password of the Wi-Fi network that the target device should be provisioned onto.\n* **Respond to the provisioning request:** The target device responds to the DPP Request message with a DPP Response message. The DPP Response message contains the target device's public key.\n* **Exchange the encryption keys:** The provisioning device and the target device exchange their encryption keys. The encryption keys are used to encrypt the data that is exchanged during the provisioning process.\n* **Provision the target device:** The provisioning device provisions the target device onto the Wi-Fi network. The provisioning device sends a DPP Provisioning message to the target device. The DPP Provisioning message contains the Wi-Fi network credentials.\n* **Complete the provisioning process:** The target device completes the provisioning process by connecting to the Wi-Fi network.\n\n**3. Interaction with other components (if any)**\n\nThe DPP API interacts with the following components:\n\n* **Wi-Fi driver:** The DPP API uses the Wi-Fi driver to send and receive DPP messages.\n* **Network manager:** The DPP API uses the network manager to connect the target device to the Wi-Fi network.\n\n**4. Important parameters and return values**\n\nThe following are the most important parameters and return values of the DPP API:\n\n* **DPP Request message:** The DPP Request message contains the SSID and password of the Wi-Fi network that the target device should be provisioned onto.\n* **DPP Response message:** The DPP Response message contains the target device's public key.\n* **Encryption keys:** The encryption keys are used to encrypt the data that is exchanged during the provisioning process.\n* **DPP Provisioning message:** The DPP Provisioning message contains the Wi-Fi network credentials.\n* **RETURN_OK:** The DPP API function was successful.\n* **RETURN_ERR:** The DPP API function failed.\n\n**5. Any specific RDK-related operations**\n\nThe DPP API does not have any specific RDK-related operations.\nwifi_DPP_TECH_TYPE;\n\n/* wifi_dppConfigure() function */\n/**\n* @brief Configures the DPP protocol parameters.\n*\n* @param[in] dppTech - DPP Technical configuration is defined by the technical method used by the DPP protocol to enable secure communication.\n*\n* @return The status of the operation.\n* @retval RETURN_OK if successful.\n* @retval RETURN_ERR if any error is detected\n*\n* @execution Synchronous.\n* @sideeffect None\n*\n* @note This function must not suspend and must not invoke any blocking system\n* calls. It should probably just send a message to a driver event handler task.\n*\n*/\nINT wifi_dppConfigure(wifi_DPP_TECH_TYPE dppTech);\n\n/* wifi_dppCreateEnrolleeURI() function */\n/**\n* @brief Creates URL for configuring the Enrollee to make it usable on WebUI.\n*\n* Optional function may be used when Enollee graphical user interface is available.\n*\n* @param[out] enrolleeURI - Unique URI is returned in the enrolleeURI, to be used by Enrollee to add itself to the provisioning protocol, must be valid for the duration of the provisioning process.\n*\n* @return The status of the operation.\n* @retval RETURN_OK if successful.\n* @retval RETURN_ERR if any error is detected\n*\n* @execution Synchronous.\n* @sideeffect None\n*\n* @note This function must not suspend and must not invoke any blocking system\n* calls. It should probably just send a message to a driver event handler task.\n*\n*/\nINT wifi_dppCreateEnrolleeURI(char *enrolleeURI);\n\n/* wifi_dppCreateProvisioningInfo() function */\n/**\n* @brief Creates provisioning info for the Provisioner to make it usable on WebUI.\n*\n* Optional function may be used when Provisioner graphical user interface is available.\n*\n* @param[out] provisioningInfo - Provisioning information is returned in the provisioningInfo, to be used by Provisioner to add itself to the provisioning protocol, must be valid for the duration of the provisioning process.\n*\n* @return The status of the operation.\n* @retval RETURN_OK if successful.\n* @retval RETURN_ERR if any error is detected\n*\n* @execution Synchronous.\n* @sideeffect None\n*\n* @note This function must not suspend and must not invoke any blocking system\n* calls. It should probably just send a message to a driver event handler task.\n*\n*/\nINT wifi_dppCreateProvisioningInfo(char *provisioningInfo);\n\n/* wifi_dppCreateScanInfo() function */\n/**\n* @brief Creates scan info for the Enrollee to make it usable on WebUI.\n*\n* Optional function may be used when Enrollee graphical user interface is available.\n*\n* @param[out] scanInfo - Unique scaninfo is returned, to be used by Enrollee to do wifi scan in absence of a physical WPS push button.\n*\n* @return The status of the operation.\n* @retval RETURN_OK if successful.\n* @retval RETURN_ERR if any error is detected\n*\n* @execution Synchronous.\n* @sideeffect None\n*\n* @note This function must not suspend and must not invoke any blocking system\n* calls. It should probably just send a message to a driver event handler task.\n*\n*/\nINT wifi_dppCreateScanInfo(char *scanInfo);\n\n/* wifi_dppSetEnrolleeInfo() function */\n/**\n* @brief Sets Enrollee configuration.\n*\n* @param[out] netRole - Role of the device as an Enrollee in the DPP process.\n* @param[out] configMethod - Configuration method used by the device as an Enrollee in the DPP process.\n* @param[out] netInfo - Network info about the owner's network being shared.\n*\n* @return The status of the operation.\n* @retval RETURN_OK if successful.\n* @retval RETURN_ERR if any error is detected\n*\n* @execution Synchronous.\n* @sideeffect None\n*\n* @note This function must not suspend and must not invoke any blocking system\n* calls. It should probably just send a message to a driver event handler task.\n*\n*/\nINT wifi_dppSetEnrolleeInfo(wifi_dppEnrolleeRole netRole, wifi_dppConfigMethods configMethod, wifi_dpp_net_info_t *netInfo);\n\n/* wifi_dppSetProvisionerInfo() function */\n/**\n* @brief Sets Provisioner configuration.\n*\n* @param[out] netRole - Role of the device as the Provisioner in the DPP process.\n* @param[out] configMethod - Configuration method used by the device as the Provisioner in the DPP process.\n*\n* @return The status of the operation.\n* @retval RETURN_OK if successful.\n* @retval RETURN_ERR if any error is detected\n*\n* @execution Synchronous.\n* @sideeffect None\n*\n* @note This function must not suspend and must not invoke any blocking system\n* calls. It should probably just send a message to a driver event handler task.\n*\n*/\nINT wifi_dppSetProvisionerInfo(wifi_dppProvisionerRole netRole, wifi_dppConfigMethods configMethod);\n\n/* wifi_dppStart() function */\n/**\n* @brief Starts the DPP process.\n*\n* @param[out] startType - Specifies the method to start the DPP process.\n*\n* @return The status of the operation.\n* @retval RETURN_OK if successful.\n* @retval RETURN_ERR if any error is detected\n*\n* @execution Synchronous.\n* @sideeffect None\n*\n* @note This function must not suspend and must not invoke any blocking system\n* calls. It should probably just send a message to a driver event handler task.\n*\n*/\nINT wifi_dppStart(wifi_dpp_start_type_t startType);\n\n/* wifi_dppStop() function */\n/**\n* @brief Stops the DPP process.\n*\n* @return The status of the operation.\n* @retval RETURN_OK if successful.\n* @retval RETURN_ERR if any error is detected\n*\n* @execution Synchronous.\n* @sideeffect None\n*\n* @note This function must not suspend and must not invoke any blocking system\n* calls. It should probably just send a message to a driver event handler task.\n*\n*/\nINT wifi_dppStop();\n\n/* wifi_dppGetStatus() function */\n/**\n* @brief Gets the DPP status.\n*\n* @param[out] output_status -",
  "processed_at": "2024-11-14T13:39:09.739531"
}