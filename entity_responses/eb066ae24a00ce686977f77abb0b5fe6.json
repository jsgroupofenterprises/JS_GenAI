{
  "entity_name": "pjs_ovs_dmap_real_from_json",
  "component": "CcspWifiAgent",
  "content_hash": "eb066ae24a00ce686977f77abb0b5fe6",
  "response": "**1. Main purpose and functionality**\n\nThe pjs_ovs_dmap_real_from_json function is responsible for parsing a JSON object and extracting key-value pairs where the keys are integers and the values are double precision floating-point numbers.\n\n**2. Key operations and data flow**\n\nThe function takes the following parameters:\n\n* `keys`: A pointer to an array of integers to store the keys\n* `out_data`: A pointer to an array of double precision floating-point numbers to store the values\n* `out_max`: The maximum number of key-value pairs that can be stored\n* `out_len`: A pointer to an integer to store the actual number of key-value pairs stored\n* `present`: A pointer to a boolean to indicate whether the key-value pair is present in the JSON object\n* `js`: A pointer to the JSON object to be parsed\n* `name`: The name of the key-value pair to be extracted\n* `update`: A boolean to indicate whether to update the existing key-value pair if it already exists\n* `err`: A pointer to an error message\n\nThe function first calls the pjs_int_t_from_json function to extract the keys from the JSON object. It then calls the pjs_real_t_from_json function to extract the values from the JSON object. If the key-value pair is not present in the JSON object, the function sets the corresponding element in the `present` array to false.\n\n**3. Interaction with other components (if any)**\n\nThe function does not interact with any other components.\n\n**4. Important parameters and return values**\n\nThe following parameters are important:\n\n* `keys`: A pointer to an array of integers to store the keys\n* `out_data`: A pointer to an array of double precision floating-point numbers to store the values\n* `out_max`: The maximum number of key-value pairs that can be stored\n* `out_len`: A pointer to an integer to store the actual number of key-value pairs stored\n* `present`: A pointer to a boolean to indicate whether the key-value pair is present in the JSON object\n* `js`: A pointer to the JSON object to be parsed\n* `name`: The name of the key-value pair to be extracted\n* `update`: A boolean to indicate whether to update the existing key-value pair if it already exists\n\nThe function returns a boolean to indicate whether the operation was successful.\n\n**5. Any specific RDK-related operations**\n\nThe function does not perform any RDK-specific operations.",
  "processed_at": "2024-11-13T16:26:28.662153"
}