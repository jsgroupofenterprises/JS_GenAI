{
  "entity_name": "wifi_getRadioDcsChannelMetrics",
  "component": "hal",
  "content_hash": "fc9a58c661468d9a53423bd7bd27624c",
  "response": "wifi_dpp_t.\n\n//** This function is used to set the DPP configuration profile of the specific AP.\n*\n* @param[in] apIndex  Access Point index\n* @param[in] dppConfig   DPP config parameters\n*\n* @return The status of the operation\n* @retval RETURN_OK if successful\n* @retval RETURN_ERR if any error is detected\n*\n* @execution Synchronous\n* @sideeffect None\n*\n* @note This function must not suspend and must not invoke any blocking system\n* calls. It should probably just send a message to a driver event handler task.\n*\n*/\nINT wifi_setApDppConfiguration(INT apIndex, wifi_dpp_t *dppConfig);\n\n/**\n* @brief Get the DPP configuration profile of the specific AP.\n*\n* @param[in] apIndex  Access Point index\n* @param[out] dppConfig   DPP config parameters (to be returned)\n*\n* @return The status of the operation\n* @retval RETURN_OK if successful\n* @retval RETURN_ERR if any error is detected\n*\n* @execution Synchronous\n* @sideeffect None\n*\n* @note This function must not suspend and must not invoke any blocking system\n* calls. It should probably just send a message to a driver event handler task.\n*\n*/\nINT wifi_getApDppConfiguration(INT apIndex, wifi_dpp_t *dppConfig);\n\n/**\n* @brief Enable/Disable DPP on a specific AP.\n*\n* @param[in]  apIndex        Access Point index\n* @param[in]  enableDPP      True=enable, False=disable\n*\n* @return The status of the operation\n* @retval RETURN_OK if successful\n* @retval RETURN_ERR if any error is detected\n*\n* @execution Synchronous\n* @sideeffect None\n*\n* @note This function must not suspend and must not invoke any blocking system\n* calls. It should probably just send a message to a driver event handler task.\n*\n*/\nINT wifi_setApDppEnable(INT apIndex, BOOL enableDPP);\n\n/**\n* @brief Get the DPP enablement status of a specific AP.\n*\n* @param[in]  apIndex  Access Point index\n* @param[out] output_bool  True=enabled, False=disabled\n*\n* @return The status of the operation\n* @retval RETURN_OK if successful\n* @retval RETURN_ERR if any error is detected\n*\n* @execution Synchronous\n* @sideeffect None\n*\n* @note This function must not suspend and must not invoke any blocking system\n* calls. It should probably just send a message to a driver event handler task.\n*\n*/\nINT wifi_getApDppEnable(INT apIndex, BOOL *output_bool);\n\n/**\n* @brief Init a DPP transaction on selected ap.\n*\n* @param[in] apIndex The index of the access point.\n* @param[in] config  DPP config parameters\n*\n* @return The status of the operation\n* @retval RETURN_OK if successful\n* @retval RETURN_ERR if any error is detected\n*\n* @execution Synchronous\n* @sideeffect None\n*\n* @note This function must not suspend and must not invoke any blocking system\n* calls. It should probably just send a message to a driver event handler task.\n*\n*/\nINT wifi_dppInit(INT apIndex, wifi_dpp_t *config);\n\n/**\n* @brief Release a DPP transaction on selected ap.\n*\n* @param[in] apIndex The index of the access point.\n*\n* @return The status of the operation\n* @retval RETURN_OK if successful\n* @retval RETURN_ERR if any error is detected\n*\n* @execution Synchronous\n* @sideeffect None\n*\n* @note This function must not suspend and must not invoke any blocking system\n* calls. It should probably just send a message to a driver event handler task.\n*\n*/\nINT wifi_dppRelease(INT apIndex);\n\n/**\n* @brief Start a DPP transaction on selected ap.\n*\n* @param[in] apIndex The index of the access point.\n*\n* @return The status of the operation\n* @retval RETURN_OK if successful\n* @retval RETURN_ERR if any error is detected\n*\n* @execution Synchronous\n* @sideeffect None\n*\n* @note This function must not suspend and must not invoke any blocking system\n* calls. It should probably just send a message to a driver event handler task.\n*\n*/\nINT wifi_dppStart(INT apIndex);\n\n/**\n* @brief Stop a DPP transaction on selected ap.\n*\n* @param[in] apIndex The index of the access point.\n*\n* @return The status of the operation\n* @retval RETURN_OK if successful\n* @retval RETURN_ERR if any error is detected\n*\n* @execution Synchronous\n* @sideeffect None\n*\n* @note This function must not suspend and must not invoke any blocking system\n* calls. It should probably just send a message to a driver event handler task.\n*\n*/\nINT wifi_dppStop(INT apIndex);\n\n/**\n* @brief Cancel a DPP transaction on selected ap.\n*\n* @param[in] apIndex The index of the access point.\n*\n* @return The status of the operation\n* @retval RETURN_OK if successful\n* @retval RETURN_ERR if any error is detected\n*\n* @execution Synchronous\n* @sideeffect None\n*\n* @note This function must not suspend and must not invoke any blocking system\n* calls. It should probably just send a message to a driver event handler task.\n*\n*/\n INT wifi_dppCancel(INT apIndex);\n\n\n/**\n* @brief Get the results of a DPP transaction on selected ap.\n*\n* @param[in] apIndex The index of the access point.\n* @param[in] output_struct The output dpp status and key\n*\n* @return The status of the operation\n* @retval RETURN_OK if successful\n* @retval RETURN_ERR if any error is detected\n*\n* @execution Synchronous\n* @sideeffect None\n*\n* @note This function must not suspend and must not invoke any blocking system\n* calls. It should probably just send a message to a driver event handler task.\n*\n*/\nINT wifi_dppGetStatus(INT apIndex, wifi_dppResult_t *output_struct);\n\n/*************** Wifi System  function **************************/\n\n/* wifi_handleConfig() function */\n/**\n* @brief This function is called with a configuration telegram from the CE.\n*\n* The syntax and meaning of the configuration parameters must be documented\n* by the RDK-B user and are specific to their application and intent.\n*\n* @param[in] component    Indicates the component (HAL, WIFI, APP, etc.)  the configuration is for.\n* @param[in] target    Indicates the target of the config param within the component (e.g., lteStack, pPicCellGroup).\n* @param[in] action    Indicates the action to be done with the config param.\n* @param[in] params    A pointer to the actual config parameters.\n* @param[in] paramSize  The length of the config parameters in octets including tailing NULL.\n*\n* @return Result.\n* @retval RETURN_OK if successful\n* @retval RETURN_ERR if any error is detected\n*\n* @execution Synchronous\n* @sideeffect None\n*\n* @note This function must not suspend and must not invoke any blocking system\n* calls. It should probably just send a message to a driver event handler task.\n*\n*/\nINT wifi_handleConfig(INT component, INT target, INT action, CHAR *params, UINT paramSize);\n/* wifi_handleDiagnostics() function */\n/**\n* @brief This function is called to request diagnostic results from the specified component.\n*\n* The format and content of the diagnostics report sent back is specific to the component making the report.\n*\n* @param[in] component    Indicates the component (HAL, WIFI, APP, etc.) the diagnostics report is from.\n* @param[in] target    Indicates the target of the diagnostics param within the component (e.g., lteStack, pPicCellGroup).\n* @param[in] action    Indicates the action to be done with the diagnostics param.  If the component supports\n* diagnostics reporting, this will always be the diagnostic's action, DIAG_DUMP, otherwise it must be ignored.\n* @param[out] params    A pointer to a buffer that should be populated with the diagnostics report.\n* @param[in, out] paramSize  This parameter receives the size of the diagnostics report and also contains the\n* max size the caller can accept.  If the buffer provided is too small, the diagnostics report is truncated\n* to fit in the specified size.  If the diagnostics report is larger than the buffer, the caller should\n* pass a large enough buffer to receive the entire report.  If the caller would rather not receive a truncated\n* report it must check if",
  "processed_at": "2024-11-14T13:45:04.217371"
}