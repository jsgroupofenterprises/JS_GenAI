{
  "entity_name": "wifi_getRadioDfsSupport",
  "component": "hal",
  "content_hash": "fc96fd488a3623352095feee4598adae",
  "response": "wifi_DPP_TECH_TYPE\n        \n        enum of the dpp technology supported.\n        \n        \n        \n            WIFI_DPP_TECH_INFRA:\n            DPP Infrastructure Configuration.\n        \n        \n        \n        \n        \n    \n}\nwifi_DPP_TECH_TYPE;\n\n/**\n* @brief Get the DPP Configurator List.\n*\n* @param[in] apIndex        Index of the Access Point.\n* @param[in] output_array   Pointer to an array of wifi_dpp_configurator_list_t\n*                          structures, preallocated by the caller. This is\n*                          where the output is written. If the item in the\n*                          array is not used, the \"status\" should be set to\n*                          WIFI_DPP_STATUS_FAILED.\n* @param[in] output_size    The size of the output_array array in array items.\n*\n* @return The status of the operation\n* @retval RETURN_OK if successful\n* @retval RETURN_ERR if any error is detected\n*\n* @execution Synchronous\n* @sideeffect None\n*\n* @note This function must not suspend and must not invoke any blocking system\n* calls. It should probably just send a message to a driver event handler task.\n*\n*/\nINT wifi_getDPPConfiguratorList(INT apIndex, wifi_dpp_configurator_list_t *output_array, INT output_size);\n\n/**\n* @brief Get the DPP Enrollee List.\n*\n* @param[in] apIndex        Index of the Access Point.\n* @param[in] output_array   Pointer to an array of wifi_dpp_enrollee_list_t\n*                          structures, preallocated by the caller. This is\n*                          where the output is written. If the item in the\n*                          array is not used, the \"status\" should be set to\n*                          WIFI_DPP_STATUS_FAILED.\n* @param[in] output_size    The size of the output_array array in array items.\n*\n* @return The status of the operation\n* @retval RETURN_OK if successful\n* @retval RETURN_ERR if any error is detected\n*\n* @execution Synchronous\n* @sideeffect None\n*\n* @note This function must not suspend and must not invoke any blocking system\n* calls. It should probably just send a message to a driver event handler task.\n*\n*/\nINT wifi_getDPPEnrolleeList(INT apIndex, wifi_dpp_enrollee_list_t *output_array, INT output_size);\n\n/**\n* @brief Get the DPP Enrollee List.\n*\n* @param[in] apIndex        Index of the Access Point.\n* @param[in] dpp_configurator   DPP Configurator structure.\n* @param[in] output_array   Pointer to an array of wifi_dpp_enrollee_list_t\n*                          structures, preallocated by the caller. This is\n*                          where the output is written. If the item in the\n*                          array is not used, the \"status\" should be set to\n*                          WIFI_DPP_STATUS_FAILED.\n* @param[in] output_size    The size of the output_array array in array items.\n*\n* @return The status of the operation\n* @retval RETURN_OK if successful\n* @retval RETURN_ERR if any error is detected\n*\n* @execution Synchronous\n* @sideeffect None\n*\n* @note This function must not suspend and must not invoke any blocking system\n* calls. It should probably just send a message to a driver event handler task.\n*\n*/\nINT wifi_setDPPConfigurator(INT apIndex, wifi_dpp_configurator_t *dpp_configurator );\n\n/**\n* @brief Start the DPP process by using the information from the DPP Configurator.\n*\n* @param[in] apIndex        Index of the Access Point.\n* @param[in] dpp_configurator   DPP Configurator structure.\n* @param[in] curve_id        Curve to be used for the DPP process.\n* @param[in] mac_address     Mac address of the STA to which this process relates.\n*\n* @return The status of the operation\n* @retval RETURN_OK if successful\n* @retval RETURN_ERR if any error is detected\n*\n* @execution Synchronous\n* @sideeffect None\n*\n* @note This function must not suspend and must not invoke any blocking system\n* calls. It should probably just send a message to a driver event handler task.\n*\n*/\nINT wifi_startDPP(INT apIndex, wifi_dpp_configurator_t *dpp_configurator, wifi_dpp_curve_id_t curve_id, mac_t *mac_address);\n\n/**\n* @brief Finish the DPP process\n*\n* @param[in] apIndex        Index of the Access Point.\n* @param[in] dpp_configurator   DPP Configurator structure.\n* @param[out] dpp_enrollee      DPP Enrollee structure.\n* @param[in] mac_address     Mac address of the STA to which this process relates.\n*\n* @return The status of the operation\n* @retval RETURN_OK if successful\n* @retval RETURN_ERR if any error is detected\n*\n* @execution Synchronous\n* @sideeffect None\n*\n* @note This function must not suspend and must not invoke any blocking system\n* calls. It should probably just send a message to a driver event handler task.\n*\n*/\nINT wifi_finishDPP(INT apIndex, wifi_dpp_configurator_t *dpp_configurator, wifi_dpp_enrollee_t *dpp_enrollee, mac_t *mac_address);\n\n\n/**\n* @brief Cancel the ongoing DPP process.\n*\n* @param[in] apIndex        Index of the Access Point.\n* @param[in] mac_address     Mac address of the STA to which this process relates.\n*\n* @return The status of the operation\n* @retval RETURN_OK if successful\n* @retval RETURN_ERR if any error is detected\n*\n* @execution Synchronous\n* @sideeffect None\n*\n* @note This function must not suspend and must not invoke any blocking system\n* calls. It should probably just send a message to a driver event handler task.\n*\n*/\nINT wifi_cancelDPP(INT apIndex, mac_t *mac_address);\n\n/**\n* @brief Get the DPP status.\n*\n* @param[in] apIndex        Index of the Access Point.\n* @param[in] mac_address     Mac address of the STA to which this process relates.\n* @param[out] dpp_status      Status of the DPP process.\n*\n* @return The status of the operation\n* @retval RETURN_OK if successful\n* @retval RETURN_ERR if any error is detected\n*\n* @execution Synchronous\n* @sideeffect None\n*\n* @note This function must not suspend and must not invoke any blocking system\n* calls. It should probably just send a message to a driver event handler task.\n*\n*/\nINT wifi_getDPPStatus(INT apIndex, mac_t *mac_address, wifi_dpp_status_t *dpp_status);\n\n/**\n* @brief Get the DPP Token.\n*\n* @param[in] apIndex        Index of the Access Point.\n* @param[in] mac_address     Mac address of the STA to which this process relates.\n* @param[out] token           Pointer to the buffer to be filled with the token.\n* @param[in] token_size      Size of the token buffer in bytes.\n*\n* @return The status of the operation\n* @retval RETURN_OK if successful\n* @retval RETURN_ERR if any error is detected\n*\n* @execution Synchronous\n* @sideeffect None\n*\n* @note This function must not suspend and must not invoke any blocking system\n* calls. It should probably just send a message to a driver event handler task.\n*\n*/\nINT wifi_getDPPToken(INT apIndex, mac_t *mac_address, CHAR *token, INT token_size);\n\n/**\n* @brief Set the DPP Technical Configuration.\n*\n* @param[in] apIndex        Index of the Access Point.\n* @param[in] tech_config     DPP Technical Configuration.\n*\n* @return The status of the operation\n* @retval RETURN_OK if successful\n* @retval RETURN_ERR if any error is detected\n*\n* @execution Synchronous\n* @sideeffect None\n*\n* @note This function must not suspend and must not invoke any blocking system\n* calls. It should probably just send a message to a driver event handler task.\n*\n*/\nINT wifi_setDPPTechnicalConfiguration(INT apIndex, wifi_dpp_technical_config_t *tech_config);\n\n/**\n* @brief Get the DPP Technical Configuration.\n*\n*",
  "processed_at": "2024-11-14T13:50:52.836695"
}