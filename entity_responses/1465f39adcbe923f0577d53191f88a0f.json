{
  "entity_name": "wifi_setRadioMode",
  "component": "hal",
  "content_hash": "1465f39adcbe923f0577d53191f88a0f",
  "response": "## WiFi DPP\n\n### Main purpose and functionality\n\nDPP (Device Provisioning Protocol) is an authentication protocol that allows devices to securely connect to a Wi-Fi network without requiring the user to enter a password. It uses a QR code or NFC to exchange credentials between the device and the Wi-Fi network.\n\n### Key operations and data flow\n\n1. The user scans the QR code or taps the NFC tag on their device.\n2. The device decodes the QR code or NFC tag and extracts the DPP configuration information.\n3. The device sends the DPP configuration information to the Wi-Fi network.\n4. The Wi-Fi network verifies the DPP configuration information and sends back a confirmation message.\n5. The device connects to the Wi-Fi network using the credentials provided in the confirmation message.\n\n### Interaction with other components\n\nDPP interacts with the following other components:\n\n* The Wi-Fi network: DPP is used to authenticate devices to a Wi-Fi network.\n* The device: DPP is used to provision devices with Wi-Fi network credentials.\n\n### Important parameters and return values\n\nThe following are some of the important parameters and return values used by DPP:\n\n* **QR code**: A QR code that contains the DPP configuration information.\n* **NFC tag**: An NFC tag that contains the DPP configuration information.\n* **DPP configuration information**: The configuration information that is used to authenticate the device to the Wi-Fi network.\n* **Confirmation message**: A message that is sent back to the device by the Wi-Fi network to confirm the DPP configuration information.\n\n### Any specific RDK-related operations\n\nDPP is supported in RDK by the `wifi_dpp` HAL API. The `wifi_dpp` HAL API provides a set of functions that can be used to implement DPP on RDK devices.\n\n### Detailed description of component\n\nThe wifi_setRadioMode function is used to set the mode of operation for a radio. The mode of operation can be one of the following:\n\n* AP_ONLY: The radio will only operate as an access point.\n* CLIENT_ONLY: The radio will only operate as a client.\n* DUAL_MODE: The radio will operate as both an access point and a client.\n* AUTO_MODE: The radio will automatically switch between AP and client modes as needed.\n\nThe mode of operation is set by setting the channelMode parameter to one of the following values:\n\n* 0: AP_ONLY\n* 1: CLIENT_ONLY\n* 2: DUAL_MODE\n* 3: AUTO_MODE\n\nThe wifi_setRadioMode function returns the following values:\n\n* RETURN_OK: The function was successful.\n* RETURN_ERR: The function failed.\n\nThe following code sample shows you how to use the wifi_setRadioMode function:\n\n```c\nINT wifi_setRadioMode(INT radioIndex, CHAR *channelMode)\n```",
  "processed_at": "2024-11-14T13:14:53.758759"
}